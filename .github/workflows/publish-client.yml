name: Publish Client to NPM and Docker Image

on:
  push:
    tags:
      - 'v*' # Триггерится при создании тегов, начинающихся с "v" (например, v1.0.0)

jobs:
  publish-client:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: messages
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1. Checkout кода
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Настройка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      # 3. Установка зависимостей
      - name: Install dependencies
        run: npm install

      # 4. Сборка проекта
      - name: Build project
        run: npm run build

      # 5. Генерация OpenAPI спецификации
      - name: Generate OpenAPI spec
        run: npm run start:prod
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: password
          DB_NAME: messages
          GENERATE_OPENAPI: true

      # 6. Извлечение версии из тега
      - name: Extract version from tag
        id: extract_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      # 7. Генерация TypeScript Axios клиента
      - name: Generate TypeScript Axios client
        run: |
          docker run --rm \
            -v "${PWD}:/local" \
            --user "$(id -u):$(id -g)" \
            openapitools/openapi-generator-cli generate \
            -g typescript-axios \
            -i /local/openapi.json \
            -o /local/generated-client-axios \
            --additional-properties npmName=your-axios-package-name,npmVersion=${{ env.version }},npmRepository=https://registry.npmjs.org/

      # 8. Исправление прав доступа для Axios клиента
      - name: Fix permissions for Axios client
        run: sudo chown -R $(id -u):$(id -g) ./generated-client-axios

      # 9. Установка зависимостей для Axios клиента
      - name: Install dependencies for Axios client
        working-directory: ./generated-client-axios
        run: npm ci

      # 10. Публикация Axios клиента в NPM
      - name: Publish Axios client to NPM
        working-directory: ./generated-client-axios
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # 11. Генерация NestJS клиента
      - name: Generate NestJS client
        run: |
          docker run --rm \
            -v "${PWD}:/local" \
            --user "$(id -u):$(id -g)" \
            openapitools/openapi-generator-cli generate \
            -g typescript-nestjs \
            -i /local/openapi.json \
            -o /local/generated-client-nestjs \
            --additional-properties npmName=your-nestjs-package-name,npmVersion=${{ env.version }},npmRepository=https://registry.npmjs.org/

      # 12. Исправление прав доступа для NestJS клиента
      - name: Fix permissions for NestJS client
        run: sudo chown -R $(id -u):$(id -g) ./generated-client-nestjs

      # 13. Установка зависимостей для NestJS клиента
      - name: Install dependencies for NestJS client
        working-directory: ./generated-client-nestjs
        run: npm ci

      # 14. Публикация NestJS клиента в NPM
      - name: Publish NestJS client to NPM
        working-directory: ./generated-client-nestjs
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
